##################################################
# Contract Assistance
# by Joe Parkin
##################################################

contract_assistance_interaction = {
	category = interaction_category_diplomacy
	interface_priority = 15
	common_interaction = yes
	interface = interfere_in_war
	special_interaction = interfere_in_war_interaction
	popup_on_receive = yes
	pause_on_receive = yes

	ai_maybe = yes
	desc = contract_assistance_interaction_desc
	icon = icon_gold

	greeting = positive
	notification_text = contract_assistance_interaction_notification

	cooldown_against_recipient = { years = 5 }

	is_shown = {
		# Actor is Involved in Struggle
		scope:actor = {
			any_character_struggle = {
				involvement = involved
				has_struggle_phase_parameter = unlocks_contract_assistance_interaction
			}
		}
		# Recipient is Involved in Struggle, at war, and not at war with Actor
		scope:recipient = {
			any_character_struggle = {
				involvement = involved
				has_struggle_phase_parameter = unlocks_contract_assistance_interaction
			}
			is_at_war = yes
			NOR = {
				this = scope:actor
				is_at_war_with = scope:actor
			}
		}
	}

	has_valid_target = {
		exists = scope:target
	}

	has_valid_target_showing_failures_only = {
		scope:target = { is_war_leader = scope:recipient }
	}

	is_valid_showing_failures_only = {
		scope:recipient = {
			# Cannot demand gold from allies
			NOT = { is_allied_to = scope:actor }
		}

		# Recipient is not in (any) war against your liege(s)
		trigger_if = {
			limit = { exists = scope:actor.liege }
			custom_description = {
				text = join_war_interaction_recipient_warring_with_my_liege
				subject = scope:recipient
				scope:actor = {
					NOT = { any_liege_or_above = { is_at_war_with = scope:recipient } }
				}
			}
		}

		# Cannot join wars with raised armies
		scope:actor = { has_raised_armies = no }

		# Can only contract one war at a time
		custom_tooltip = {
			text = contract_assistance_war_already_contracted_tt
			scope:actor = { NOT = { has_variable = owed_contract_assistance_war } }
		}
	}
	
	can_be_picked = {
		# Recipient is war leader in chosen war
		scope:target = {
			is_war_leader = scope:recipient
			# Cannot contract against allies
			trigger_if = {
				limit = {
					any_war_attacker = { this = scope:recipient }
				}
				NOT = {
					any_war_defender = { is_allied_to = scope:actor }
				}
			}
			trigger_else = {
				NOT = {
					any_war_attacker = { is_allied_to = scope:actor }
				}
			}
			# not already in target war
			custom_description = {
				text = join_war_interaction_already_in_target_war
				NOR = {
					any_war_attacker = { this = scope:actor }
					any_war_defender = { this = scope:actor }
				}
			}
		}
		# Liege checks
		can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:recipient JOINER = scope:actor }
	}

	on_accept = {
		# Add Actor to Recipient's war
		scope:target = {
			hidden_effect = { set_called_to = scope:actor }
			if = {
				limit = { is_attacker = scope:recipient }
				add_attacker = scope:actor
			}
			else = { add_defender = scope:actor }
		}
		# Actor effects
		scope:actor = {
			save_scope_as = contract_assistance_helper
			set_variable = {
				name = owed_contract_assistance_war
				value = scope:target
			}
			set_variable = {
				name = owed_contract_assistance_contribution
				value = offer_assistance_interaction_war_contribution_value
			}
			set_variable = {
				name = owed_contract_assistance_gold
				value = offer_assistance_interaction_gold_value
			}
			stress_impact = {
				craven = medium_stress_impact_gain
				shy = minor_stress_impact_gain
			}

			# Struggle Catalyst
			if = {
				limit = {
					# Verify if vassal used to be independent
					any_character_struggle = {
						involvement = involved
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_join_war_as_assisant
							CHAR = scope:recipient
						}
					}
				}
				every_character_struggle = {
					involvement = involved
					limit = {
						activate_struggle_catalyst_secondary_character_involvement_involved_trigger = {
							CATALYST = catalyst_join_war_as_assisant
							CHAR = scope:recipient
						}
					}
					activate_struggle_catalyst = {
						catalyst = catalyst_join_war_as_assisant
						character = scope:actor
					}
				}
			}
		}
		# Recipient effects
		scope:recipient = {
			stress_impact = {
				greedy = medium_stress_impact_gain
				arrogant = medium_stress_impact_gain
			}
			custom_tooltip = contract_assistance_interaction_condition_tt
			show_as_tooltip = {
				pay_short_term_gold = {
					target = scope:actor
					gold = offer_assistance_interaction_gold_value
				}
			}
		}

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:actor
			TARGET = scope:recipient
			VALUE = medium_unity_loss
			DESC = clan_unity_contract_assistance.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}

	on_decline = {
		# Refusal notification
		scope:actor = { trigger_event = char_interaction.0236 }

		# If we're a clan this interaction affects unity
		add_clan_unity_interaction_effect = {
			CHARACTER = scope:recipient
			TARGET = scope:actor
			VALUE = minor_unity_gain
			DESC = clan_unity_contract_assistance_decline.desc
			REVERSE_NON_HOUSE_TARGET = no
		}
	}
	
	ai_accept = {
		base = 0 # Reluctant to spend money without good reason
		# Recipient already winning war
		modifier = {
			add = -50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_winning_trigger = yes }
			}
			trigger_else = {
				any_character_war = {
					count = all # So predicted negative modifiers are treated seperately
					fp2_struggle_contract_assistance_war_winning_trigger = yes
				}
			}
			desc = OA_AI_WINNING_WAR_REASON
		}
		# Recipient losing war
		modifier = {
			add = 50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_losing_trigger = yes }
			}
			trigger_else = {
				any_character_war = { fp2_struggle_contract_assistance_war_losing_trigger = yes }
			}
			desc = OA_AI_LOSING_WAR_REASON
		}
		# Recipient already significantly outnumbers enemy
		modifier = {
			add = -50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_outnumbering_trigger = yes }
			}
			trigger_else = {
				any_character_war = {
					count = all # So predicted negative modifiers are treated seperately
					fp2_struggle_contract_assistance_war_outnumbering_trigger = yes
				}
			}
			desc = OA_AI_OUTNUMBER_ENEMY_REASON
		}
		# Recipient is outnumbered
		modifier = {
			add = 50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					fp2_struggle_contract_assistance_war_outnumbered_minor_trigger = yes
					NOT = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
				}
			}
			trigger_else = {
				any_character_war = {
					fp2_struggle_contract_assistance_war_outnumbered_minor_trigger = yes
					NOT = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
				}
			}
			desc = OA_AI_OUTNUMBERED_MINOR_REASON
		}
		# Recipient is very outnumbered
		modifier = {
			add = 125
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
			}
			trigger_else = {
				any_character_war = { fp2_struggle_contract_assistance_war_outnumbered_trigger = yes }
			}
			desc = OA_AI_OUTNUMBERED_REASON
		}
		# Recipient has low cash
		modifier = {
			add = {
				value = -50
				if = {
					limit = {
						gold < 0
					}
					add = -100
				}
				if = {
					limit = {
						debt_level >= 2
					}
					add = -200
				}
				if = { # Very generous or vengeful characters *will* make poor decisions
					limit = {
						OR = {
							ai_greed <= -50
							ai_vengefulness >= 50
						}
					}
					multiply = 0.5
				}
			}
			gold < offer_assistance_interaction_gold_value
			desc = OA_AI_CANNOT_AFFORD_REASON
		}
		# Recipient has a lot of cash
		modifier = {
			add = {
				value = 25
				if = {
					limit = {
						gold >= {
							value = offer_assistance_interaction_gold_value
							multiply = 2
						}
					}
					add = 50
				}
				if = {
					limit = {
						gold >= {
							value = offer_assistance_interaction_gold_value
							multiply = 3
						}
					}
					add = 50
				}
			}
			gold >= offer_assistance_interaction_gold_value
			desc = OA_AI_EXTRA_GOLD_REASON
		}
		# Actor's troops would be little help
		modifier = {
			add = -50
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_insufficient_trigger = yes }
			}
			trigger_else = {
				any_character_war = {
					count = all # So predicted negative modifiers are treated seperately
					fp2_struggle_contract_assistance_war_insufficient_trigger = yes
				}
			}
			desc = OA_AI_FEW_TROOPS_REASON
		}
		# Recipient is fighting a defensive war
		modifier = {  
			add = 25
			trigger_if = {
				limit = { exists = scope:target }
				scope:target.casus_belli.primary_defender = scope:recipient
			}
			trigger_else = {
				scope:recipient = {
					any_character_war = { primary_defender = scope:recipient }
				}
			}
			desc = OA_AI_DEFENSIVE_WAR_REASON
		}
		# Recipient is not interested in help for certain wars
		modifier = {  
			add = -300
			exists = scope:target
			scope:target = {
				OR = {
					using_cb = peasant_war
					using_cb = fp2_border_raid
				}
			}
			desc = OA_AI_UNINTERESTED_WAR_REASON
		}
		modifier = {
			add = {
				value = scope:actor.martial
				multiply = 2
			}
			scope:actor = { martial >= 12 }
			desc = OA_AI_MARTIAL_REASON
		}
		modifier = {
			add = -50
			scope:actor = { has_character_flag = fp2_contract_assistance_failure }
			desc = OA_AI_FAILURE_REASON
		}
		# Opinion Factor
		opinion_modifier = {
			who = scope:recipient
			opinion_target = scope:actor
			multiplier = 0.25
			desc = AI_OPINION_REASON
		}

		modifier = {
			add = {
				value = ai_greed
				multiply = -0.2
			}
			ai_greed <= 0.5
			desc = AI_VALUE_MODIFIER_GREED
		}

		modifier = {
			add = {
				value = ai_boldness
				multiply = -0.2
			}
			NOT = { ai_boldness = 0 }
			desc = AI_VALUE_MODIFIER_BOLDNESS
		}

		# Allegiances
		# fp2_contracting_ally_modifier = {
		# 	WARMONGER = scope:recipient
		# 	WARJOINER = scope:actor
		# }
	}

	ai_potential = {
		is_imprisoned = no
		is_at_war = no
		ai_boldness >= -25
	}
	ai_target_quick_trigger = { adult = yes }
	ai_targets = {
		ai_recipients = neighboring_rulers
	}

	ai_set_target = {
		scope:recipient = {
			ordered_character_war = { #We offer our services for the war where the character is losing the most
				limit = {
					is_war_leader = prev
					NOR = {
						any_war_attacker = { this = scope:actor }
						any_war_defender = { this = scope:actor }
					}
					save_temporary_scope_as = target
					can_join_war_liege_vassal_check_trigger = { WARRIOR = scope:recipient JOINER = scope:actor }
				}
				order_by = {
					value = 0
					add = {
						if = {
							limit = { any_war_attacker = { this = scope:recipient } }
							subtract = attacker_war_score
						}
						else = {
							subtract = defender_war_score
						}
					}
				}
				save_scope_as = target
			}
		}
	}
	
	ai_targets = {
		ai_recipients = peer_vassals
	}
	ai_frequency = 24 # We need a quite high frequency as wars do not last forever

	ai_will_do = {
		base = 0

		modifier = { # Increase chance if recipient is losing a war
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_losing_trigger = yes }
			}
			add = 25
		}
		
		modifier = { # Increase chance with amount of gold of recipient over interaction cost
			factor = offer_assistance_interaction_gold_modifier_value
		}

		modifier = { # Increase chance if likes recipient more than enemy
			scope:actor = {
				save_temporary_opinion_value_as = {
					name = contract_assistance_actor_opinion
					target = scope:recipient
				}
			}
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					any_war_participant = {
						is_leader_in_war = scope:target
						NOT = { this = scope:recipient }
						reverse_opinion = {
							target = scope:actor
							value < scope:contract_assistance_actor_opinion
						}
					}
				}
			}
			add = 25
		}

		modifier = { # Increase chance for family
			scope:recipient = {
				OR = {
					dynasty = scope:actor.dynasty
					is_consort_of = scope:actor
				}
			}
			add = 25
		}

		modifier = { # Decrease chance if army is small
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = { fp2_struggle_contract_assistance_war_insufficient_trigger = yes }
			}
			add = -50
		}

		modifier = { # Increase chance for rivalry
			trigger_if = {
				limit = { exists = scope:target }
				scope:target = {
					any_war_participant = {
						is_leader_in_war = scope:target
						NOT = { this = scope:recipient }
						has_relation_rival = scope:actor
					}
				}
			}
			add = 25
		}

		# Higher chance to target a human player
		modifier = {
			scope:recipient = { is_ai = no }
			factor = 2
		}
	}
}